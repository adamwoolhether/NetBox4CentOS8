---
- name: "PLAY 1: INSTALL & INIT REQUIREMENTS"
  hosts: netboxhost
  tags: ['init']

  tasks:
  - name: INSTALL DEPENDENCIES
    dnf:
      name:
        - epel-release
        - postgresql
        - postgresql-server
        - postgresql-devel
        - gcc
        - python36
        - python36-devel
        - python3-setuptools
        - libxml2-devel
        - libxslt-devel
        - libffi-devel
        - openssl-devel
        - redhat-rpm-config
        - redis
        - git
        - httpd
        - python3-psycopg2
        - python3-pexpect
      state: latest

  - name: UPGRADE PIP TO LATEST
    pip:
      name: pip
      executable: pip3
      state: latest

  - name: CHECK IF POSTGRESQL IS INITIALIZED
    stat:
      path: /var/lib/pgsql/data/postgresql.conf
    register: init_test
  # - debug:
  #     var: init_test.stat.exists
  #   tags: ['debug']

  - name: INITIALIZE POSTGRESQL
    command: /usr/bin/postgresql-setup --initdb --unit postgresql
    when: init_test.stat.exists == false

  - name: CONFIG POSTGRESQL TO ACCEPT PW-BASED AUTH
    postgresql_pg_hba:
      dest: /var/lib/pgsql/data/pg_hba.conf
      contype: host
      users: all
      databases: all
      method: md5

  - name: START POSTGRESQL SERVICE
    service:
      name: postgresql
      state: started
      enabled: yes

- name: "PLAY 2: CREATE THE NETBOX DATABASE"
  hosts: netboxhost
  become_user: postgres
  vars_files:
    - vars/config.yml
  tags: ['db']

  tasks:
  - name: CREATE DB
    postgresql_db:
      name: netbox

  - name: CREATE DB USER
    postgresql_user:
      name: netbox
      db: netbox
      password: "{{ auth['password'] }}"
      priv: ALL

  - name: VERIFY DB STATUS
    postgresql_info:
      login_host: localhost
      login_user: netbox
      login_password: "{{ auth['password'] }}"
      filter: all
    register: status
    failed_when: status['failed'] != false

- name: "PLAY 3: START AND VERIFY REDIS SERVICE"
  hosts: netboxhost
  tags: ['redis']

  tasks:
  - name: START REDIS SERVICE
    service:
      name: redis
      state: started
      enabled: yes

  - name: TEST REDIS SERVICE STATUS
    command: redis-cli ping
    register: redis_resp
    failed_when: redis_resp['stdout'] != "PONG"
    changed_when: false
  # - debug:
  #     # var: redis_resp
  #     msg: Redis response to ping is {{ redis_resp.stdout }}

- name: "PLAY 4: INSTALL & CONFIGURE NETBOX APP"
  hosts: netboxhost
  vars_files:
    - vars/config.yml
  tags: ['nbinstall']

  tasks:
  - name: CLONE GIT REPO
    git:
      repo: https://github.com/netbox-community/netbox.git
      dest: /opt/netbox

  - name: CREATE NETBOX SYSTEM GROUP
    group:
      name: netbox
      state: present
      system: yes

  - name: CREATE NETBOX SYSTEM USER
    user:
      name: netbox
      groups: netbox
      state: present
      system: yes

  - name: SET NETBOX FILE PERMISSIONS
    file:
      path: /opt/netbox/netbox/media
      owner: netbox
      recurse: true

  - name: CHECK FOR CONFIG FILE
    stat:
      path: /opt/netbox/netbox/netbox/configuration.py
    register: conf_test
  # - debug:
  #     var: conf_test.stat

  - name: POPULATE NETBOX CONFIGURATION FILE
    block:
    - name: GENERATE SECRET KEY
      command: python3 /opt/netbox/netbox/generate_secret_key.py
      register: secret_key
    # - debug:
    #     msg: secret key is {{ secret_key }}
    #   tags: ['debug', 'never']
    - name: STORE KEY FOR TEMPLATE USE
      set_fact:
        nbconf_key: "{{ secret_key.stdout }}"
        cacheable: yes
    # - debug:
    #     msg: "{{ ansible_facts['nbconf_key'] }}"
    #   tags: ['debug','never']
    - name: POPULATE NETBOX CONFIG FROM TEMPLATE
      template:
        src: templates/dbconf.j2
        dest: /opt/netbox/netbox/netbox/configuration.py
        mode: '0644'
    when: conf_test.stat.exists == false

  - name: CHECK IF UPGRADE.SH MUST RUN
    stat:
      path: /opt/netbox/venv
    register: venv_test

  - name: RUN UPGRADE SCRIPT & CREATE SUPER USER
    block:
    - name: RUN UPGRADE.SH
      command: /opt/netbox/upgrade.sh
    - name: CREATE SUPER USER
      expect:
        command: /bin/bash -c "source /opt/netbox/venv/bin/activate && python3 /opt/netbox/netbox/manage.py createsuperuser"
        responses: "{{ app }}" 
    when: venv_test.stat.exists == false

  - name: RUN TEST INSTANCE
    shell: >
      source /opt/netbox/venv/bin/activate
      && python3 /opt/netbox/netbox/manage.py runserver 0.0.0.0:8000 --insecure
    async: 15
    poll: 0
  - name: WAIT FOR TEST INSTANCE START
    pause:
      seconds: 5
  - name: TEST SERVER RESPONSE
    uri:
      url: "http://{{ config['ip'] }}:8000"
      return_content: yes
    register: uri_resp
    failed_when: "'<title>Home - NetBox</title>' not in uri_resp.content"

- name: "PLAY 5: CONFIG GUINICORN & INITIALIZE NETBOX"
  hosts: netboxhost
  tags: ['nbinstall', 'gunicorn']

  tasks:
  - name: COPY DEFAULT GUINICORN CONFIG
    copy:
      src: /opt/netbox/contrib/gunicorn.py
      dest: /opt/netbox/gunicorn.py
      remote_src: yes    
  
  - name: COPY SYSTEMD FILES & RELOAD DAEMON
    find:
      paths: /opt/netbox/contrib
      file_type: file
      patterns: '*.service'
    register: service_file
  - copy:
      src: "{{ item }}"
      dest: /etc/systemd/system/
      remote_src: yes
    with_items:
      - "{{ service_file.files[0].path }}"
      - "{{ service_file.files[1].path }}"
  - systemd:
      daemon_reload: yes
  
  - name: START & ENABLE NETBOX SERVICE
    service:
      name: "{{ item }}"
      state: started
      enabled: yes
    loop:
      - netbox-rq
      - netbox

- name: "PLAY 6: HTTPD SERVER SETUP"
  hosts: netboxhost
  vars_files:
    - vars/config.yml
  tags: ['webserver', 'httpd']

  tasks:
  - name: CHECK FOR SELF-SIGNED CERTS
    stat:
      path: /etc/ssl/private/netbox.key
    register: cert_test

  - name: GENERATE CERTS
    block:
    - name: CREATE CERTS DIR
      file:
        path: /etc/ssl/private
        state: directory

    - name: GENERATE SELF SIGNED CERTIFICATE
      expect:
        command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/netbox.key -out /etc/ssl/certs/netbox.crt
        responses: "{{ ssl }}"
    when: cert_test.stat.exists == false
      
  - name: POPULATE HTTPD CONFIG FROM TEMPLATE
    template:
      src: templates/httpdconf.j2
      dest: /etc/httpd/conf.d/netbox.conf
      mode: '0644'
  
  - name: INSTALL MOD_SSL HTTPD MODULE
    dnf:
      name: certwatch-mod_ssl
      state: present
      
  - name: ENABLE HTTPD MODULES
    blockinfile:
      path: /etc/httpd/conf.modules.d/02-netbox.conf
      create: yes
      mode: '0644'
      block: |
        LoadModule ssl_module modules/mod_ssl.so
        LoadModule proxy_module modules/mod_proxy.so
        LoadModule proxy_http_module modules/mod_proxy_http.so
        LoadModule headers_module modules/mod_headers.so

  - name: CONFIGURE FIREWALLD TO ALLOW HTTPS TRAFFIC
    ansible.posix.firewalld:
      service: https
      state: enabled
      permanent: yes
      immediate: yes

  - name: CONFIURE SELINUX TO ALLOW HTTPD TRAFFIC
    seboolean:
      name: httpd_can_network_connect
      state: on
      persistent: yes

  - name: START HTTPD SERVICE
    service:
      name: httpd
      state: restarted
      enabled: yes

- name: "PLAY 7: INSTALL ANSIBLE MODULES"
  hosts: netboxhost
  vars_files:
    - vars/config.yml
  tags: ['modules']    
  
  tasks:
  - name: INSTALL ANSIBLE & PYNETBOX
    dnf:
      name: 
        - ansible
        - python3-pynetbox
      state: latest

  - name: INSTALL NETBOX.NETBOX COLLECTION
    command: ansible-galaxy collection install netbox.netbox -c

  - name: NETBOX SETUP COMPLETE
    debug:  
      msg: 
        - Access your Netbox server at https://{{ config['ip'] }} or https://{{ config['domain'] }} if you've setup dns.
        - Playbook by Adam Woolhether | https://github.com/adamwoolhether | adamwoolhether@gmail.com
        - Thanks to NetBox team and DigitalOcean for such a great tool!