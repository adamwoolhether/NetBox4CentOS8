- name: CLONE GIT REPO
  git:
    repo: https://github.com/netbox-community/netbox.git
    dest: /opt/netbox

- name: CREATE NETBOX SYSTEM GROUP
  group:
    name: netbox
    state: present
    system: yes

- name: CREATE NETBOX SYSTEM USER
  user:
    name: netbox
    groups: netbox
    state: present
    system: yes

- name: SET NETBOX FILE PERMISSIONS
  file:
    path: /opt/netbox/netbox/media
    owner: netbox
    recurse: true

- name: CHECK FOR CONFIG FILE
  stat:
    path: /opt/netbox/netbox/netbox/configuration.py
  register: conf_test
# - debug:
#     var: conf_test.stat

- name: POPULATE NETBOX CONFIGURATION FILE
  block:
  - name: GENERATE SECRET KEY
    command: python3 /opt/netbox/netbox/generate_secret_key.py
    register: secret_key
  # - debug:
  #     msg: secret key is {{ secret_key }}
  #   tags: ['debug', 'never']
  - name: STORE KEY FOR TEMPLATE USE
    set_fact:
      nbconf_key: "{{ secret_key.stdout }}"
      cacheable: yes
  # - debug:
  #     msg: "{{ ansible_facts['nbconf_key'] }}"
  #   tags: ['debug','never']
  - name: POPULATE NETBOX CONFIG FROM TEMPLATE
    template:
      src: dbconf.j2
      dest: /opt/netbox/netbox/netbox/configuration.py
      mode: '0644'
  when: conf_test.stat.exists == false

- name: CHECK IF UPGRADE.SH MUST RUN
  stat:
    path: /opt/netbox/venv
  register: venv_test

- name: RUN UPGRADE SCRIPT & CREATE SUPER USER
  block:
  - name: RUN UPGRADE.SH
    command: /opt/netbox/upgrade.sh
  - name: CREATE SUPER USER
    expect:
      command: /bin/bash -c "source /opt/netbox/venv/bin/activate && python3 /opt/netbox/netbox/manage.py createsuperuser"
      responses: "{{ app }}" 
  - name: RUN TEST INSTANCE
    shell: >
      source /opt/netbox/venv/bin/activate
      && python3 /opt/netbox/netbox/manage.py runserver 0.0.0.0:8000 --insecure
    async: 15
    poll: 0
  - name: WAIT FOR TEST INSTANCE START
    pause:
      seconds: 5
  - name: TEST SERVER RESPONSE
    uri:
      url: "http://{{ config['ip'] }}:8000 "
      return_content: yes
    register: uri_resp
    failed_when: "'<title>Home - NetBox</title>' not in uri_resp.content"
  when: venv_test.stat.exists == false

- name: COPY DEFAULT GUINICORN CONFIG
  copy:
    src: /opt/netbox/contrib/gunicorn.py
    dest: /opt/netbox/gunicorn.py
    remote_src: yes    

- name: COPY SYSTEMD FILES & RELOAD DAEMON
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    remote_src: yes
  with_fileglob:
    - "/opt/netbox/contrib/*.service"
- systemd:
    daemon_reload: yes

- name: START & ENABLE NETBOX SERVICE
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - netbox-rq
    - netbox